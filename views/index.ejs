<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="CACHE-CONTROL" content="NO-CACHE">
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.2.3/milligram.min.css">
  <title>Simple Storage Dapp 예제 </title>
  <style>
    body {margin-left:50px;}
    #storedData {font-size:300%; margin-right:10px;}
    #newValue {width: 200px; margin-right:10px; text-align:right;}
  </style>
</head>
<body>
<h3>Simple Storage dApp 예제</h3>
<ul>
  <li>컨트랙트 주소: <span id="contractAddr"></span></li>
  <li>내 어카운트 주소: <span id="accountAddr"></span></li>
  <li>컨트랙트에 저장된 값: <span id="storedData"></span>
    <button onclick="getValue()">새로고침</button> (현재블록: <span id="lastBlock"></span>)</li>
  <li><input id="newValue" type="text"><button onclick="setValue()">새 값으로 저장하기</button>
      <div id="result"></div></li>
  <li>새 값을 저장한 후 팬딩 트랜잭션이 블록에 포함되면 자동으로 페이지가 업데이트될 것입니다.</li>
</ul>

컨트랙트 소스
<script src="https://gist.github.com/atomrigs/7c633570496b79623bed5d1286f93f3a.js"></script>

HTML 소스<br>
<a href="https://github.com/atomrigs/atomrigs.github.io/blob/master/simplestorage.html">https://github.com/atomrigs/atomrigs.github.io/blob/master/simplestorage.html</a>;
<br><br>
<p>
<a href="http://www.chaintalk.io/archive/lecture?sca=%EB%82%98%EB%8F%84+dApp+%EA%B0%9C%EB%B0%9C"><i>나도 dApp 개발해 보자 시리즈 by Atomrigs © 2017</i></a>
</p>

</body>
<script src="js/web3.min.js"></script>
<!-- script src="https://code.jquery.com/jquery-3.1.1.slim.min.js"></script -->
<script>

var walletAddress = '0xe9cea74ca58839ff18019511ace0f6cac0e5878f';
var contractAddress = '0x852a29040504D4d41aCC83bFe1d6a1861BB46797';
var abi = [ { "constant": true, "inputs": [ { "name": "fileHash", "type": "string" } ], "name": "get", "outputs": [ { "name": "timestamp", "type": "uint256", "value": "0" }, { "name": "owner", "type": "string", "value": "" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "owner", "type": "string" }, { "name": "fileHash", "type": "string" } ], "name": "set", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "status", "type": "bool" }, { "indexed": false, "name": "timestamp", "type": "uint256" }, { "indexed": false, "name": "owner", "type": "string" }, { "indexed": false, "name": "fileHash", "type": "string" } ], "name": "logFileAddedStatus", "type": "event" } ];
var simpleStorageContract;
var simpleStorage;

window.addEventListener('load', function() {

  // Checking if Web3 has been injected by the browser (Mist/MetaMask)
  if (typeof web3 !== 'undefined') {
    // Use Mist/MetaMask's provider
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    window.web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));
  }
  window.web3.eth.getCoinbase().then(function (coinbase) {
    window.web3.eth.getBalance(walletAddress).then(function(balance){
      // 내 지갑에 들어있는 액수
      console.log(balance);
    });
  })
  .catch(function (error) {
      console.log(error.message);
  });

  // Now you can start your app & access web3 freely:
  startApp();
});

function startApp() {
  simpleStorageContract = new web3.eth.Contract(abi);
  simpleStorage = web3.eth.getStorageAt(contractAddress);
  document.getElementById('contractAddr').innerHTML = getLink(contractAddress);
  web3.eth.getAccounts(function(e,r){
    document.getElementById('accountAddr').innerHTML = getLink(r[0]);
  });

  getValue('lee');
  const random = Math.floor(Math.random()*1000);
console.log(web3.utils.utf8ToHex(`${random}`));
  setValue(`k${random}ey`,`v${random}alue`);
  getValue('k825ey');
}

function getLink(addr) {
  return '<a target="_blank" href=https://testnet.etherscan.io/address/' + addr + '>' + addr +'</a>';
}

function getValue(key) {
  var contract = new web3.eth.Contract(abi, contractAddress);
  contract.methods.get(key).call().then(function(result){
    console.log(result);
  })
  .catch(function (error) {
      console.log(error);
  });

}

function setValue(key,value) {
    console.log(key,value);
  var contract = new web3.eth.Contract(abi, contractAddress);
  contract.methods.set(key,value).send({from:walletAddress
  })
  .on('receipt', function(receipt){
    console.log(`receipt : ${receipt}`);
  })
  .on('confirmation', function(confirmationNumber, receipt){

  })
  .on('error', console.error);
    
}

</script>
</html>